/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: "sanity.imagePaletteSwatch";
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: "sanity.imagePalette";
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: "sanity.imageDimensions";
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type Geopoint = {
	_type: "geopoint";
	lat?: number;
	lng?: number;
	alt?: number;
};

export type RefundPolicy = {
	_id: string;
	_type: "refundPolicy";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	policy?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
};

export type TermsConditions = {
	_id: string;
	_type: "termsConditions";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	terms?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
};

export type PrivacyPolicy = {
	_id: string;
	_type: "privacyPolicy";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	policy?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
};

export type Careers = {
	_id: string;
	_type: "careers";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	description?: string;
	availability?: "car" | "bicycle";
	location?: "car" | "bicycle";
	skills?: Array<string>;
	content?: Array<
		| {
				children?: Array<{
					marks?: Array<string>;
					text?: string;
					_type: "span";
					_key: string;
				}>;
				style?:
					| "normal"
					| "h1"
					| "h2"
					| "h3"
					| "h4"
					| "h5"
					| "h6"
					| "blockquote";
				listItem?: "bullet" | "number";
				markDefs?: Array<{
					href?: string;
					_type: "link";
					_key: string;
				}>;
				level?: number;
				_type: "block";
				_key: string;
		  }
		| {
				asset?: {
					_ref: string;
					_type: "reference";
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: "sanity.fileAsset";
				};
				_type: "file";
				_key: string;
		  }
		| {
				asset?: {
					_ref: string;
					_type: "reference";
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
				};
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt?: string;
				_type: "image";
				_key: string;
		  }
	>;
};

export type Blogs = {
	_id: string;
	_type: "blogs";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	featured?: boolean;
	description?: string;
	thumbnail?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	category?: string;
	avgReadingTime?: number;
	author?: {
		name?: string;
		image?: {
			asset?: {
				_ref: string;
				_type: "reference";
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
			};
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			_type: "image";
		};
		twitter?: string;
		linkedIn?: string;
	};
	content?: Array<
		| {
				children?: Array<{
					marks?: Array<string>;
					text?: string;
					_type: "span";
					_key: string;
				}>;
				style?:
					| "normal"
					| "h1"
					| "h2"
					| "h3"
					| "h4"
					| "h5"
					| "h6"
					| "blockquote";
				listItem?: "bullet" | "number";
				markDefs?: Array<{
					href?: string;
					_type: "link";
					_key: string;
				}>;
				level?: number;
				_type: "block";
				_key: string;
		  }
		| {
				asset?: {
					_ref: string;
					_type: "reference";
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: "sanity.fileAsset";
				};
				_type: "file";
				_key: string;
		  }
		| {
				asset?: {
					_ref: string;
					_type: "reference";
					_weak?: boolean;
					[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
				};
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt?: string;
				_type: "image";
				_key: string;
		  }
	>;
};

export type SanityFileAsset = {
	_id: string;
	_type: "sanity.fileAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type Enquiry = {
	_id: string;
	_type: "enquiry";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	email?: string;
	message?: string;
	createdAt?: string;
};

export type Products = {
	_id: string;
	_type: "products";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	thumbnail?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	title?: string;
	slug?: Slug;
	description?: string;
	link?: string;
	tags?: Array<string>;
	content?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
	seo?: SeoMetaFields;
};

export type Services = {
	_id: string;
	_type: "services";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	thumbnail?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	title?: string;
	slug?: Slug;
	description?: string;
	link?: string;
	tags?: Array<string>;
	clientName?: string;
	category?: string;
	timeline?: string;
	budget?: string;
	content?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
	seo?: SeoMetaFields;
};

export type Project = {
	_id: string;
	_type: "project";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	thumbnail?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	title?: string;
	slug?: Slug;
	description?: string;
	link?: string;
	tags?: Array<string>;
	clientName?: string;
	category?: string;
	timeline?: string;
	budget?: string;
	about?: string;
	type?: string;
	platform?: string;
	mission?: {
		description?: string;
		missions?: Array<string>;
	};
	technology?: Array<string>;
	problemSolving?: Array<string>;
	features?: Array<string>;
	ownerReview?: {
		_id: string;
		name: string;
		role: string;
		image: string;
		message: string;
	};
	seo?: SeoMetaFields;
};

export type Reviews = {
	_id: string;
	_type: "reviews";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	role?: string;
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	message?: string;
};

export type Slug = {
	_type: "slug";
	current?: string;
	source?: string;
};

export type Pages = {
	_id: string;
	_type: "pages";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	route?: string;
	seo?: SeoMetaFields;
};

export type MetaTag = {
	_type: "metaTag";
	metaAttributes?: Array<
		{
			_key: string;
		} & MetaAttribute
	>;
};

export type MetaAttribute = {
	_type: "metaAttribute";
	attributeKey?: string;
	attributeType?: "string" | "image";
	attributeValueImage?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	attributeValueString?: string;
};

export type SeoMetaFields = {
	_type: "seoMetaFields";
	nofollowAttributes?: boolean;
	metaTitle?: string;
	metaDescription?: string;
	metaImage?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	seoKeywords?: Array<string>;
	openGraph?: OpenGraph;
	additionalMetaTags?: Array<
		{
			_key: string;
		} & MetaTag
	>;
	twitter?: Twitter;
};

export type Twitter = {
	_type: "twitter";
	cardType?: string;
	creator?: string;
	site?: string;
	handle?: string;
};

export type OpenGraph = {
	_type: "openGraph";
	url?: string;
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	title?: string;
	description?: string;
	siteName?: string;
};

export type SanityImageCrop = {
	_type: "sanity.imageCrop";
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityImageHotspot = {
	_type: "sanity.imageHotspot";
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageAsset = {
	_id: string;
	_type: "sanity.imageAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
	_type: "sanity.assetSourceData";
	name?: string;
	id?: string;
	url?: string;
};

export type SanityImageMetadata = {
	_type: "sanity.imageMetadata";
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| Geopoint
	| RefundPolicy
	| TermsConditions
	| PrivacyPolicy
	| Careers
	| Blogs
	| SanityFileAsset
	| Enquiry
	| Products
	| Services
	| Project
	| Reviews
	| Slug
	| Pages
	| MetaTag
	| MetaAttribute
	| SeoMetaFields
	| Twitter
	| OpenGraph
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityAssetSourceData
	| SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
